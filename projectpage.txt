import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import api from '../api/axios';
import { useAuth } from '../context/AuthContext';
import CreateProjectForm from '../components/projects/CreateProjectForm';
import EditProjectForm from '../components/projects/EditProjectForm';
import ConfirmDeleteDialog from '../components/common/ConfirmDeleteDialog';
import { io } from 'socket.io-client';

import {
  PencilSquareIcon,
  TrashIcon,
  MagnifyingGlassIcon,
  ChevronDownIcon,
  BriefcaseIcon,
  UserCircleIcon,
  CheckCircleIcon,
  CalendarDaysIcon,
  MinusCircleIcon,
  ExclamationTriangleIcon,
  PlusIcon,
  ArchiveBoxXMarkIcon,
  ArrowPathIcon,
  EllipsisHorizontalIcon,
  EyeIcon,
  ListBulletIcon,
  NoSymbolIcon,
  RocketLaunchIcon,
  PauseCircleIcon,
} from '@heroicons/react/24/outline';

interface Project {
  id: string;
  name: string;
  description: string;
  status: 'Not Started' | 'In Progress' | 'Completed'  | 'On Hold' | 'Cancelled';
  createdBy: string;
  createdAt: string;
  updatedAt: string;
  creator?: { id: string; username: string; email: string; role: string; };
}

const socket = io(import.meta.env.VITE_API_BASE_URL.replace('/api', ''));

const KANBAN_COLUMNS: Array<{
  id: Project['status'];
  title: string;
  icon: React.ElementType;
  colorClass: string;
  bgColorClass: string;
}> = [
  { id: 'Not Started', title: 'Not Started', icon: MinusCircleIcon, colorClass: 'border-slate-500', bgColorClass: 'bg-slate-200/70' },
  { id: 'In Progress', title: 'In Progress', icon: RocketLaunchIcon, colorClass: 'border-sky-500', bgColorClass: 'bg-sky-50/70' },
  { id: 'On Hold', title: 'On Hold', icon: PauseCircleIcon, colorClass: 'border-yellow-500', bgColorClass: 'bg-yellow-50/70' },
  { id: 'Completed', title: 'Completed', icon: CheckCircleIcon, colorClass: 'border-green-500', bgColorClass: 'bg-green-50/70' },
  { id: 'Cancelled', title: 'Cancelled', icon: NoSymbolIcon, colorClass: 'border-red-500', bgColorClass: 'bg-red-50/70' },
];

const INITIAL_KANBAN_STATE: Record<Project['status'], Project[]> = {
  'Not Started': [],
  'In Progress': [],
  'On Hold': [],
  'Completed': [],
  'Cancelled': [],
};

const ProjectsPage: React.FC = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);

  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(false);
  const [projectToDelete, setProjectToDelete] = useState<Project | null>(null);

  const [filterStatus, setFilterStatus] = useState<string>('All');
  const [sortBy, setSortBy] = useState<string>('updatedAt');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState<string>('');

  useEffect(() => {
    const timer = setTimeout(() => setDebouncedSearchTerm(searchTerm), 500);
    return () => clearTimeout(timer);
  }, [searchTerm]);

  const { data: projects, isLoading, isError, error, refetch } = useQuery<Project[], Error>({
    queryKey: ['projects', filterStatus, sortBy, sortOrder, debouncedSearchTerm],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filterStatus !== 'All') params.append('status', filterStatus);
      if (debouncedSearchTerm.trim()) params.append('search', debouncedSearchTerm.trim());
      params.append('sortBy', sortBy);
      params.append('sortOrder', sortOrder);
      const response = await api.get(`/projects?${params.toString()}`);
      // console.log("Fetched projects:", response.data); // Optional: Log to check data
      return response.data;
    },
    staleTime: 30000,
    refetchOnWindowFocus: true,
  });

  useEffect(() => {
    const handleProjectChange = (_action: string, _data: any) => {
      queryClient.invalidateQueries({ queryKey: ['projects'] });
    };
    socket.on('connect', () => {});
    socket.on('disconnect', () => {});
    socket.on('projectCreated', (d: Project) => handleProjectChange('Created', d));
    socket.on('projectUpdated', (d: Project) => handleProjectChange('Updated', d));
    socket.on('projectDeleted', (d: { id: string }) => handleProjectChange('Deleted', d));
    return () => {
      socket.off('connect');
      socket.off('disconnect');
      socket.off('projectCreated');
      socket.off('projectUpdated');
      socket.off('projectDeleted');
    };
  }, [queryClient]);

  const deleteProjectMutation = useMutation({
    mutationFn: (projectId: string) => api.delete(`/projects/${projectId}`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['projects'] });
      setIsConfirmDeleteDialogOpen(false);
      setProjectToDelete(null);
    },
    onError: (err: any) => {
      console.error('Delete project error:', err);
      alert(`Failed to delete project: ${err.response?.data?.message || err.message}`);
      setIsConfirmDeleteDialogOpen(false);
      setProjectToDelete(null);
    },
  });

  const openDeleteConfirmDialog = useCallback((project: Project) => {
    setProjectToDelete(project);
    setIsConfirmDeleteDialogOpen(true);
  }, []);

  const handleConfirmDelete = useCallback(() => {
    if (projectToDelete) {
      deleteProjectMutation.mutate(projectToDelete.id);
    }
  }, [projectToDelete, deleteProjectMutation]);

  const handleEditProject = useCallback((project: Project) => {
    setSelectedProject(project);
    setIsEditModalOpen(true);
  }, []);
  
  const handleSortOrderChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setSortOrder(e.target.value as 'asc' | 'desc');
  }, []);

  const commonInputClasses = "form-input block w-full py-2.5 px-4 border border-slate-300 bg-white rounded-lg shadow-sm placeholder-slate-400 focus:ring-2 focus:ring-blue-600 focus:border-blue-600 focus:outline-none sm:text-sm transition-colors duration-150 ease-in-out";
  const commonSelectClasses = "form-select block w-full py-2.5 pl-4 pr-10 border border-slate-300 bg-white rounded-lg shadow-sm focus:ring-2 focus:ring-blue-600 focus:border-blue-600 focus:outline-none sm:text-sm appearance-none transition-colors duration-150 ease-in-out";
  const commonLabelClasses = "block text-xs font-medium text-slate-600 mb-1.5";

  const filteringControls = useMemo(() => (
    <div className="bg-white p-5 sm:p-6 rounded-xl shadow-lg mb-8 sticky top-[68px] sm:top-[76px] z-10">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-x-6 gap-y-5 items-end">
        <div className="relative col-span-1 sm:col-span-2 lg:col-span-1">
          <label htmlFor="search-projects" className={commonLabelClasses}>Search Projects</label>
          <MagnifyingGlassIcon className="absolute left-3.5 top-1/2 mt-px h-5 w-5 text-slate-400 pointer-events-none transform -translate-y-1/2" />
          <input
            id="search-projects"
            type="search"
            placeholder="Name or description..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className={`${commonInputClasses} pl-11`}
            autoComplete="off"
          />
        </div>
        <div>
          <label htmlFor="filter-status-kanban" className={commonLabelClasses}>Filter Displayed Columns</label>
          <div className="relative">
            <select id="filter-status-kanban" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className={commonSelectClasses}>
              <option value="All">All Statuses (Show all columns)</option>
              {KANBAN_COLUMNS.map(col => (
                <option key={col.id} value={col.id}>{col.title} (Show only this column)</option>
              ))}
            </select>
            <ChevronDownIcon className="absolute right-3.5 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400 pointer-events-none" />
          </div>
        </div>
        <div>
          <label htmlFor="sort-by" className={commonLabelClasses}>Sort Cards Within Columns By</label>
           <div className="relative">
            <select id="sort-by" value={sortBy} onChange={(e) => setSortBy(e.target.value)} className={commonSelectClasses}>
              <option value="updatedAt">Last Updated</option>
              <option value="createdAt">Created Date</option>
              <option value="name">Project Name</option>
            </select>
            <ChevronDownIcon className="absolute right-3.5 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400 pointer-events-none" />
          </div>
        </div>
        <div>
          <label htmlFor="sort-order" className={commonLabelClasses}>Order</label>
          <div className="relative">
            <select
                id="sort-order"
                value={sortOrder}
                onChange={handleSortOrderChange}
                className={commonSelectClasses}
            >
              <option value="desc">Descending</option>
              <option value="asc">Ascending</option>
            </select>
            <ChevronDownIcon className="absolute right-3.5 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400 pointer-events-none" />
          </div>
        </div>
      </div>
    </div>
  ), [searchTerm, filterStatus, sortBy, sortOrder, handleSortOrderChange, commonInputClasses, commonSelectClasses, commonLabelClasses]);

  const canCreateProject = useMemo(() => user && ['Admin', 'Project Manager'].includes(user.role), [user]);
  const canEditOrDeleteProject = useCallback((project: Project) =>
    user && (['Admin', 'Project Manager'].includes(user.role) || (project.createdBy === user.id)), [user]
  );
  
  const groupedProjects = useMemo(() => {
    if (!projects) {
        return INITIAL_KANBAN_STATE;
    }

    // Create a new accumulator object based on INITIAL_KANBAN_STATE for each run
    const acc: Record<Project['status'], Project[]> = {
        'Not Started': [],
        'In Progress': [],
        'On Hold': [],
        'Completed': [],
        'Cancelled': [],
    };

    const addedProjectIdsPerStatus: Record<Project['status'], Set<string>> = {
        'Not Started': new Set(),
        'In Progress': new Set(),
        'On Hold': new Set(),
        'Completed': new Set(),
        'Cancelled': new Set(),
    };

    for (const project of projects) {
        if (project && project.id && project.status && acc[project.status]) { // Check if project.status is a valid key
            if (!addedProjectIdsPerStatus[project.status].has(project.id)) {
                acc[project.status].push(project);
                addedProjectIdsPerStatus[project.status].add(project.id);
            } else {
                 console.warn(`ProjectPage: Skipping duplicate project ID ${project.id} for status ${project.status} during grouping.`);
            }
        } else if (project) {
            console.warn(`ProjectPage: Project with ID ${project.id} has an invalid or missing status: ${project.status}`);
        }
    }
    return acc;
  }, [projects]);


  const renderProjectCard = useCallback((project: Project) => (
    // Key is applied here. If project.id is duplicated within the list being mapped for a single column, error occurs.
    <div key={project.id} className="bg-white rounded-lg shadow-md hover:shadow-lg border border-slate-200/80 transition-shadow duration-200 mb-4 p-4 cursor-default group">
      <div className="flex justify-between items-start mb-2">
        <h3 className="text-base font-semibold text-slate-800 group-hover:text-blue-600 transition-colors line-clamp-2 leading-tight mr-2">
          {project.name}
        </h3>
        {(canEditOrDeleteProject(project)) && (
          <div className="flex-shrink-0 relative">
            <button className="p-1 text-slate-400 hover:text-slate-600 rounded-full hover:bg-slate-100 opacity-0 group-hover:opacity-100 focus:opacity-100 transition-opacity duration-150">
                <EllipsisHorizontalIcon className="h-5 w-5" />
            </button>
            <div className="absolute top-0 right-7 flex opacity-0 group-hover:opacity-100 pointer-events-none group-focus-within:opacity-100 group-focus-within:pointer-events-auto transition-opacity duration-200 space-x-1">
                 <button
                  onClick={() => handleEditProject(project)}
                  className="p-1.5 text-slate-500 hover:text-blue-600 bg-white hover:bg-blue-50 rounded-full shadow-sm border border-slate-200"
                  title="Edit Project"
                >
                  <PencilSquareIcon className="h-4 w-4" />
                </button>
                <button
                  onClick={() => openDeleteConfirmDialog(project)}
                  className="p-1.5 text-slate-500 hover:text-red-600 bg-white hover:bg-red-50 rounded-full shadow-sm border border-slate-200"
                  title="Delete Project"
                  disabled={deleteProjectMutation.isPending && deleteProjectMutation.variables === project.id}
                >
                  <TrashIcon className="h-4 w-4" />
                </button>
            </div>
          </div>
        )}
      </div>
      <p className="text-xs text-slate-500 mb-3 line-clamp-3 leading-normal">{project.description || 'No description.'}</p>
      
      <div className="text-xs text-slate-500 space-y-1.5">
        <div className="flex items-center">
            <UserCircleIcon className="h-3.5 w-3.5 mr-1.5 text-slate-400 flex-shrink-0" />
            <span><span className="font-medium text-slate-600">{project.creator?.username || 'N/A'}</span></span>
        </div>
        <div className="flex items-center">
            <CalendarDaysIcon className="h-3.5 w-3.5 mr-1.5 text-slate-400 flex-shrink-0" />
            <span>{new Date(project.createdAt).toLocaleDateString()}</span>
        </div>
      </div>
       <Link 
        to={`/dashboard/projects/${project.id}/tasks`} 
        className="mt-3 inline-flex items-center text-xs text-blue-600 hover:text-blue-700 hover:underline font-medium"
      >
        View Tasks <EyeIcon className="h-3.5 w-3.5 ml-1" />
      </Link>
    </div>
  ), [canEditOrDeleteProject, handleEditProject, openDeleteConfirmDialog, deleteProjectMutation.isPending, deleteProjectMutation.variables]);

  const activeColumns = useMemo(() => {
     return filterStatus === 'All' 
        ? KANBAN_COLUMNS 
        : KANBAN_COLUMNS.filter(col => col.id === filterStatus);
  }, [filterStatus]);

  const kanbanBoard = useMemo(() => {
    if (projects && projects.length === 0 && (filterStatus === 'All' && !debouncedSearchTerm)) {
         return (
            <div className="col-span-full text-center py-20 px-6 bg-white rounded-xl shadow-lg flex flex-col items-center justify-center">
              <ArchiveBoxXMarkIcon className="h-20 w-20 text-slate-400 mb-6" />
              <p className="text-2xl font-semibold text-slate-700 mb-2">No Projects Yet</p>
              <p className="text-slate-500 max-w-md mb-6">
                {canCreateProject ? "It looks a bit empty here. Let's get started by creating your first project!" : "There are currently no projects to display."}
              </p>
              {canCreateProject && (
                  <button
                    onClick={() => setIsCreateModalOpen(true)}
                    className="flex items-center px-5 py-2.5 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-150 ease-in-out text-sm font-semibold"
                  >
                    <PlusIcon className="h-5 w-5 mr-2 -ml-1" />
                    Create First Project
                  </button>
              )}
            </div>
          );
    }
    
    if (projects && projects.length === 0 && (filterStatus !== 'All' || debouncedSearchTerm)) {
         return (
            <div className="col-span-full text-center py-20 px-6 bg-white rounded-xl shadow-lg flex flex-col items-center justify-center">
              <MagnifyingGlassIcon className="h-20 w-20 text-slate-400 mb-6" />
              <p className="text-2xl font-semibold text-slate-700 mb-2">No Matching Projects</p>
              <p className="text-slate-500 max-w-md">
                We couldn't find any projects matching your current filters or search term. Try adjusting them.
              </p>
               <button 
                  onClick={() => { setFilterStatus('All'); setSearchTerm(''); setDebouncedSearchTerm(''); setSortBy('updatedAt'); setSortOrder('desc');}}
                  className="mt-6 px-5 py-2.5 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors shadow-sm"
                >
                  Clear Filters & Search
                </button>
            </div>
          );
    }

    if (!projects && isLoading) return null;
    if (!projects && isError) return null;
    if (!projects) return null; // Fallback if projects is somehow undefined after loading/error checks


    return (
      <div className="flex space-x-4 pb-4 overflow-x-auto min-w-full">
        {activeColumns.map(column => (
          <div key={column.id} className={`flex-shrink-0 w-80 md:w-96 rounded-xl shadow-md ${column.bgColorClass} border-t-4 ${column.colorClass}`}>
            <div className={`p-4 sticky top-0 bg-opacity-80 backdrop-blur-sm z-[5] rounded-t-lg ${column.bgColorClass}`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <column.icon className={`h-6 w-6 mr-2 flex-shrink-0 ${column.colorClass.replace('border-','text-')}`} />
                  <h2 className="text-lg font-semibold text-slate-800">{column.title}</h2>
                </div>
                <span className={`px-2.5 py-0.5 text-xs font-semibold rounded-full ${column.colorClass.replace('border-','text-')} ${column.colorClass.replace('border-','bg-').replace('-500','-100')}`}>
                  {groupedProjects[column.id] ? groupedProjects[column.id].length : 0}
                </span>
              </div>
            </div>
            <div className="p-4 pt-2 space-y-4 max-h-[calc(100vh-350px)] overflow-y-auto custom-scrollbar">
              {groupedProjects[column.id] && groupedProjects[column.id].length > 0 ? (
                groupedProjects[column.id].map(project => renderProjectCard(project))
              ) : (
                <div className="text-center py-10">
                  <ListBulletIcon className="h-12 w-12 text-slate-400 mx-auto mb-2" />
                  <p className="text-sm text-slate-500">No projects in this stage.</p>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    );
  }, [projects, groupedProjects, filterStatus, debouncedSearchTerm, canCreateProject, renderProjectCard, activeColumns, isLoading, isError]);


  if (isLoading && !projects) return (
    <div className="min-h-[calc(100vh-200px)] flex flex-col items-center justify-center text-slate-600 bg-slate-50">
        <svg className="animate-spin h-12 w-12 text-blue-600 mb-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p className="text-xl font-semibold">Loading Projects Board</p>
        <p className="text-sm text-slate-500">Please wait while we set up your Kanban board.</p>
    </div>
  );

  if (isError && !projects) return (
    <div className="min-h-[calc(100vh-200px)] flex flex-col items-center justify-center text-red-700 bg-red-50 p-10 rounded-lg">
        <ExclamationTriangleIcon className="h-16 w-16 text-red-500 mb-6" />
        <p className="text-2xl font-semibold mb-2">Error Loading Board</p>
        <p className="text-red-600 text-center mb-6 max-w-md">{error?.message || "An unexpected error occurred. Please try again."}</p>
        <button 
          onClick={() => refetch()}
          className="px-6 py-2.5 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors shadow-md"
        >
          Try Again
        </button>
    </div>
  );
  
  return (
    <div className="min-h-screen bg-slate-100/50 text-slate-900 selection:bg-blue-600 selection:text-white flex flex-col">
      <header className="bg-white shadow-sm sticky top-0 z-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
                <div className="flex items-center">
                    <BriefcaseIcon className="h-8 w-8 text-blue-600 mr-3 flex-shrink-0" />
                    <h1 className="text-2xl font-bold text-slate-800">Projects Board</h1>
                </div>
                {canCreateProject && (
                    <button
                    onClick={() => setIsCreateModalOpen(true)}
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-150 ease-in-out text-sm font-semibold"
                    >
                    <PlusIcon className="h-5 w-5 mr-1.5 -ml-0.5" />
                    New Project
                    </button>
                )}
            </div>
        </div>
      </header>
      
      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-6 md:py-8">
        {filteringControls}

        {isLoading && projects && (
          <div className="text-center text-sm text-slate-500 mb-6 py-3 px-4 bg-blue-50 border border-blue-200 rounded-lg flex items-center justify-center shadow-sm">
            <ArrowPathIcon className="animate-spin h-5 w-5 mr-2.5 text-blue-500" />
            Updating board...
          </div>
        )}
        {isError && projects && (
          <div className="text-center text-sm text-red-600 mb-6 py-3 px-4 bg-red-50 border border-red-300 rounded-lg flex items-center justify-center shadow-sm">
            <ExclamationTriangleIcon className="h-5 w-5 mr-2.5 text-red-500" />
            Could not update board. Displaying cached data.
          </div>
        )}

        {kanbanBoard}
      </main>

      {isCreateModalOpen && (
        <CreateProjectForm onClose={() => setIsCreateModalOpen(false)} />
      )}

      {isEditModalOpen && selectedProject && (
        <EditProjectForm
          project={selectedProject}
          onClose={() => { setIsEditModalOpen(false); setSelectedProject(null); }}
        />
      )}

      {projectToDelete && (
        <ConfirmDeleteDialog
            isOpen={isConfirmDeleteDialogOpen}
            onClose={() => { setIsConfirmDeleteDialogOpen(false); setProjectToDelete(null); }}
            onConfirm={handleConfirmDelete}
            title="Confirm Project Deletion"
            message="Are you sure you want to permanently delete this project and all its associated tasks? This action cannot be undone."
            itemName={projectToDelete.name}
            isDeleting={deleteProjectMutation.isPending}
        />
      )}
    </div>
  );
};

export default ProjectsPage;